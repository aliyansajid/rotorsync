generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PILOT
  CREW
}

enum AssetType {
  HELICOPTER
  TRAILER
}

model User {
  id       String   @id @default(cuid())
  fullName String
  email    String   @unique
  password String
  image    String?
  role     UserRole @default(CREW)

  // Relations
  mopekaSensors MopekaSensor[]
  bmsSensors    BMS[]
  raspiSensors  Raspi[]
  tiltSensors   TiltSensor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model MopekaSensor {
  id                String  @id @default(cuid())
  name              String
  sensorId          String
  mqttTopic         String
  mediumType        String
  tankSizeGallon    Float
  tankSizeInch      Float
  threshold         Float
  heightOffset      Float
  trailerId         String
  calibrationPoints Float[]
  createdBy         String

  // Relations
  creator    User         @relation(fields: [createdBy], references: [id])
  mopekaData MopekaData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mopeka_sensors")
}

model BMS {
  id         String @id @default(cuid())
  name       String
  deviceName String
  mqttTopic  String
  threshold  Float
  trailerId  String
  createdBy  String

  // Relations
  creator User      @relation(fields: [createdBy], references: [id])
  bmsData BMSData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bms_sensors")
}

model Raspi {
  id           String  @id @default(cuid())
  name         String
  deviceName   String
  mqttTopic    String
  helicopterId String?
  trailerId    String?
  createdBy    String

  // Relations
  creator   User        @relation(fields: [createdBy], references: [id])
  raspiData RaspiData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("raspi_sensors")
}

model TiltSensor {
  id           String  @id @default(cuid())
  name         String
  deviceName   String
  mqttTopic    String
  helicopterId String?
  trailerId    String?
  createdBy    String

  // Relations
  creator  User       @relation(fields: [createdBy], references: [id])
  tiltData TiltData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tilt_sensors")
}

model SerialNumber {
  id           String @id @default(cuid())
  assetType    AssetType
  name         String
  serialNumber String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("serial_numbers")
}

model MqttConfig {
  id       String @id @default(cuid())
  basePath String
  host     String
  port     Int
  protocol String
  username String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mqtt_config")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
  @@map("verification_tokens")
}

// =====================
// SENSOR DATA MODELS
// =====================

model RaspiData {
  id      String @id @default(cuid())
  raspiId String

  // CHT temperatures (6 probes)
  cht1 Float?
  cht2 Float?
  cht3 Float?
  cht4 Float?
  cht5 Float?
  cht6 Float?

  // EGT temperatures (6 probes)
  egt1 Float?
  egt2 Float?
  egt3 Float?
  egt4 Float?
  egt5 Float?
  egt6 Float?

  // Relations
  raspi Raspi @relation(fields: [raspiId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("raspi_data")
}

model TiltData {
  id           String @id @default(cuid())
  tiltSensorId String

  // Accelerometer
  accX Float?
  accY Float?
  accZ Float?

  // Gyroscope
  gyroX Float?
  gyroY Float?
  gyroZ Float?

  // Magnetometer
  magX Float?
  magY Float?
  magZ Float?

  // Angles
  angleX Float?
  angleY Float?
  angleZ Float?

  // Quaternion
  quat0 Float?
  quat1 Float?
  quat2 Float?
  quat3 Float?

  // Relations
  tiltSensor TiltSensor @relation(fields: [tiltSensorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tilt_data")
}

model BMSData {
  id    String @id @default(cuid())
  bmsId String

  stateOfCharge     Float?
  totalVoltage      Float?
  current           Float?
  power             Float?
  remainingCapacity Float?
  nominalCapacity   Float?
  chargingCycles    Int?
  deltaCellVoltage  Float?
  softwareVersion   String?
  errors            String?
  balancingActive   Boolean?

  // Cell voltages
  cell1Voltage Float?
  cell2Voltage Float?
  cell3Voltage Float?
  cell4Voltage Float?

  // Temperatures
  temp1 Float?
  temp2 Float?

  // Relations
  bms BMS @relation(fields: [bmsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bms_data")
}

model MopekaData {
  id             String @id @default(cuid())
  mopekaSensorId String

  rawBattery                Float?
  batteryVolt               Float?
  batteryPercent            Float?
  rawTemp                   Float?
  tempCelsius               Float?
  tempFahrenheit            Float?
  readingQuality            Float?
  tankLevelRaw              Float?
  tankLevelNonCompensatedMm Float?
  tankLevelNonCompensatedIn Float?
  tankLevelCompensatedMm    Float?
  tankLevelCompensatedInch  Float?
  accelX                    Float?
  accelY                    Float?
  angle                     Float?

  // Relations
  mopekaSensor MopekaSensor @relation(fields: [mopekaSensorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mopeka_data")
}
